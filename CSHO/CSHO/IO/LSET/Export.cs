using System.IO;
using System.Linq;
using System.Collections.Generic;
using System;

namespace CSHO{
    public partial class Handler{
        public string ExportLSET(string path, bool update=true){
            if(path == ""){return "PATH_NOT_SET";}
            if(Archive == null){return "ARCHIVE_NOT_SET";}

            string level = Archive.MasterTable.StringTable.DomainString.Split("/").ToList().Last().ToUpper();
            path = path + "/" + level;

            if(Directory.Exists(path)){Directory.Delete(path, true);}
            Directory.CreateDirectory(path);

            StreamWriter file = null;
            
            try{file = new StreamWriter(path+"\\"+level+".lset", endian);}
            catch(FileNotFoundException)      { file.Dispose(); return "ERR_FILE_NOT_FOUND"; }
            catch(DirectoryNotFoundException) { file.Dispose(); return "ERR_DIRECTORY_NOT_FOUND"; }
            catch(IOException)                { file.Dispose(); return "ERR_IO_EXCEPTION"; }  
            catch                             { return "UNKNOWN_EXCEPTION"; }

            if(update){Archive.Update();}

            file.WriteLine("// AUTOGENERATED BY CSHO\n//\n// Ver: 1.0");
            file.WriteLine();

            List<HoArchive.NameTableEntry> nameTableEntries = GetNameEntries();
            Archive.SaveLSET(file, nameTableEntries);

            file.Dispose();

            HoArchive.BinaryWriterEndian file2 = null;
            string name;
            string newname;
            List<string> dirlist;
            string dir;
            foreach(HoArchive.TOCEntry asset in GetAssets()){ // DONT EVEN ASK ME WHAT CRACK I SMOKED TO CODE THIS. I WON'T GIVE IT TO YOU.
                name = "unknown";
                foreach(HoArchive.NameTableEntry entry in nameTableEntries){
                    
                    if (entry.uidAsset == asset.uidSelf){name = entry.name; break;}
                }
                newname = "";
                foreach(string bit in name.Replace("_", ".").Split(".")){
                    if(bit == "tif"){newname += "." + bit;}
                    else{
                        if (newname!=""){newname += "/";}
                        newname += bit;
                    }
                }
                //assetpath = asset.wmlTypeID.ToString() + newname + " [" + System.Convert.ToHexString(BitConverter.GetBytes(asset.uidSelf).Reverse().ToArray()) + "]" +".dat";
                dirlist = newname.Split("/").ToList();
                dirlist.RemoveAt(dirlist.Count - 1);
                dir = String.Join("/", dirlist);
                
                //dir = String.Join("/", dirlist);
                //assetpath = dir + "/[ASSETS] " + asset.wmlTypeID.ToString() + "/" + newname.Split("/").Last() + " [" + System.Convert.ToHexString(BitConverter.GetBytes(asset.uidSelf).Reverse().ToArray()) + "]" +".dat";
                //dir = "/" + currfoldername.Split("_")[0] + "/" + String.Join("_", currfoldername.Split("_")[1..^0]) + "/[ASSET] " + asset.wmlTypeID.ToString();
                //Directory.CreateDirectory(path + "/Assets/" + asset.wmlTypeID.ToString() + dir);
                Directory.CreateDirectory(path + "/Assets/" + dir + "/[ASSETS] " + asset.wmlTypeID.ToString());
                //Console.WriteLine(path + "/Assets/" + dir + "/[ASSETS] " + asset.wmlTypeID.ToString());
                //Console.WriteLine(newname);
                try{file2 = new HoArchive.BinaryWriterEndian(path + "/Assets/" + dir + "/[ASSETS] " + asset.wmlTypeID.ToString() + "/" + newname.Split("/").Last()  + " [" + System.Convert.ToHexString(BitConverter.GetBytes(asset.uidSelf).Reverse().ToArray()) + "]" +".dat", false);}//assetpath, endian);}
                catch(FileNotFoundException){ file2.Dispose(); return "ERR_FILE_NOT_FOUND"; }
                catch(DirectoryNotFoundException) { file2.Dispose();  return "ERR_DIRECTORY_NOT_FOUND";}
                catch(IOException)          { file2.Dispose();  return "ERR_IO_EXCEPTION"; }
                catch                       { return "UNKNOWN_EXCEPTION"; }
                file2.Write(asset.data.ToArray());
                file2.Dispose();
            }


            return "";
        }
    }
}